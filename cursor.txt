statement has four kinds of operation against database.
They are CRUDs which are create,read,update,delete.
There're also predefined sql statements for retrieving
schema information from database;

Here comes the problem:
1.open-cursor is a kind of resource that must be released,
after usage.
2.open-cursor is generated by select statement or predefined
statements for schema information.
3.if open-cursor is generated against one statement handle,
the statement handle CAN NOT execute any kind of query any
more.


Solution in mind:
If there is some way to detect the existence of open-cursor,
then what we need to do is just closing cursor before any
query again.
And If fantasy way does exist,result set of execution of 
sql statement will be known accurately not that approximate
through "SQLNumResultCols"

But,Is there any way to detect cursor is opened?

1.SQLNumResultCols will return number greater than zero even
statement has not yet been executed,but just prepared.
So it's not accurate.

2.In ODBC 3.x,SQLCloseCursor will return state 24000 if no
cursor is open.If there's actually some cursor open,this
detection will close it immediately and we will lose our cursor.
So this is rediculous.

transactions may force cursors closed,which is indicated by some
attributes,no matter either rollback or commit.

set event for this?And how about network disconnection by 
occasionally incidents?

ConnectionLevelTransaction m_tranEvent;
EnvironmentLevelTransaction

m_tranEvent.addTranListener(*pCursor);
env.closeAllConnections();
conn.closeAllStatements();

do SQLExecute\SQLExecDirect first,then detect SQLNumResultCols

ResultSet(Statement&)
ResultSet(Statement&,std::string const&);

Cursor(ResultSet&);
