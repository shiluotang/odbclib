
1.starts from environment alloc.
2.then connection alloc
2.1 open connection
3.and then statement
(
	3.1 there may be some in or out parameters
)
4.execute
5.get resultset or rows affected
(
	5.1 cursor moves if resultset exists
)
6.close cursor
7.unbind columns
8.free statement
9.close connection
10.free connection
10.free environment

FUNCTION SEQUENCE:
=======================================================
environment handle(0 -> N)[SQLAllocHandle]
	connection handle(env 1 -> conn N)[SQLAllocHandle]
		session (conn 1 -> session 1)[SQLDriverConnect/SQLBrowseConnect/SQLDSNConnect]
			statement handle (session 1 -> stmt N)[SQLAllocHandle]
				opened cursor (stmt 1 -> opened cursor 1)[SQLPrepare|SQLExecute/SQLExecDirect]
				close[SQLCloseCursor]
			free[SQLFreeHandle]
		close[SQLDisconnect]
	free[SQLFreeHandle]
free[SQLFreeHandle]
=======================================================

relationship matrix:
		env	conn	stmt	cursor	resultset	rowset
env		0	1	0	0	0		0
conn		1	0	1	0	0		0
stmt		0	1	0	1	1		0
cursor		0	0	1	0	1		1
resultset	0	0	1	1	0		1
rowset		0	0	0	0	1		1	

		1	2	3	2	3		3


-------------------------------
	odbclib::utils::Event<T>
-------------------------------
+ ~Event<T>() : dtor virtual
+ addListener(EventListener<T> &) :void
+ removeListener(EventListener<T> &) :void
+ removeListeners() : void
+ occur(T const&): void

# notifyListeners(T const&) : void

- m_listeners : std::vector< EventListener<T>* >
-------------------------------

-------------------------------
	odbclib::utils::EventListener<T>
-------------------------------
+ ~EventListener<T>() : dtor virtual
+ onEvent(Event<T> const&);

- m_events : std::vector< Event<T>* >
-------------------------------


-------------------------------
	enumerations
-------------------------------
enum HandleType
{
	Null
	Environment,
	Connection,
	Statement,
	Descriptor
}

enum EnvironmentVersion{ODBC3,ODBC2};
enum DiagLevel{Warning,Error};

enum CursorType;
enum CursorScrollable;
enum CursorSensitivity;
enum CursorConcurrency;
enum FetchOrientation;
enum CursorBehavior;

typedef SQLLEN fetchoffset_t;
-------------------------------

-------------------------------
	DiagInfo
-------------------------------
- DiagInfo() : ctor
- DiagInfo(SQLCHAR*,SQLINTEGER,SQLCHAR*,DiagLevel) : ctor 

//if SQL_SUCCESS return immediately,
//try to fetch diagnostic information
//about SQL_SUCCESS_WITH_INFO and values
//other and the previous twos
$ getDiagInfos(SQLRETURN,Handle const&) : std::vector<DiagInfo>

+ getState()const : SQLCHAR const* 
+ getMessage() const : SQLCHAR const*
+ getNativeErrorCode() const: SQLINTEGER
+ getLevel() const : DiagLevel
+ toString() const : std::string

- m_state : SQLCHAR[7]
- m_nativeErrorCode : SQLINTEGER
- m_message : SQLCHAR[0x1 << 10]
- m_level : DiagLevel

friend Handle
friend std::ostream& operator<<(std::ostream&,DiagInfo const&);
-------------------------------


-------------------------------
	DiagInfoEventArgs
-------------------------------
+ DiagInfoEventArgs(Handle &,DiagInfo const&) : ctor

+ getDiagInfo() const : DiagInfo const&
+ getHandle() const: Handle &

- m_diagInfo : DiagInfo const&
- m_handle : mutable Handle &
-------------------------------


-------------------------------
typedef Event<DiagInfoEventArgs> DiagInfoEvent;
typedef EventListener<DiagInfoEventArgs> DiagInfoListener;
-------------------------------


-------------------------------
	DisposeEventArgs
-------------------------------
-------------------------------


-------------------------------
typedef Event<DisposeEventArgs> DisposeEvent
typedef EventListener<DisposeEventArgs> DisposeEventListener
-------------------------------

-------------------------------
	Disposable
-------------------------------
+ Dispose() : ctor
+ dispose() : void pure virtual
-------------------------------


//Handle is encapsulation of SQLHANDLE.
//so intern m_handle is no directly used by
//users. then it must be freed before destruction
//at least.
-------------------------------
	Handle
-------------------------------
-HandleInfo : inner struct
HandleInfo(SQLSMALLINT):ctor
m_handle :SQLHANDLE
m_type : SQLSMALLINT

+ Handle(Handle const*,HandleType) : ctor
+ ~Handle() : dtor virtual

+ getDiagInfosAsString() const: std::string
+ OnNewDiagInfo : DiagInfoEvent

//for encapsulation,make it invisible to users
+ getHandle() const : SQLHANDLE
+ getType() const : HandleType

+ setAttribute(SQLINTEGER ,SQLUINTEGER) : SQLRETURN
+ setAttribute(SQLINTEGER ,SQLINTEGER) : SQLRETURN
+ setAttribute(SQLINTEGER ,SQLUSMALLINT) : SQLRETURN
+ setAttribute(SQLINTEGER ,SQLSMALLINT) : SQLRETURN
+ setAttribute(SQLINTEGER ,SQLCHAR*,SQLINTEGER = SQL_NTS) : SQLRETURN
+ setAttribute(SQLINTEGER ,SQLPOINTER ,SQLINTEGER):SQLRETURN

+ getAttribute(SQLINTEGER ,SQLUINTEGER&): SQLRETURN
+ getAttribute(SQLINTEGER ,SQLINTEGER&): SQLRETURN
+ getAttribute(SQLINTEGER ,SQLUSMALLINT&): SQLRETURN
+ getAttribute(SQLINTEGER ,SQLSMALLINT&): SQLRETURN
+ getAttribute(SQLINTEGER ,SQLPOINTER ,SQLINTEGER ,SQLINTEGER*) : SQLRETURN

- m_handleInfo : HandleInfo
-------------------------------


-------------------------------
	Component:
public Disposable,
public DisposeEventListener 
-------------------------------
+ Component() : ctor
+ onDisposing() : void pure virtual
+ onDisposed() : void pure virtual
+ doDispose() : void pure virtual
+ onEvent(DisposeEvent &event,DisposeEventArgs const&arg) : void virtual

+ addDisposingListener(DisposeEventListener&) : void
+ addDisposedListener(DisposeEventListener&) : void
+ removeDisposingListener(DisposeEventListener&) : void
+ removeDisposedListener(DisposeEventListener&) : void

# m_has_tried_dispose : bool
# m_disposed :bool
# m_disposingEvent :DisposeEvent
# m_disposedEvent : DisposeEvent
-------------------------------


-------------------------------
	Environment:public Component
-------------------------------
+ Environment() :ctor
+ ~Environment() :dtor virtual
+ commit() : void
+ rollback() : void
+ getVersion() const: EnvironmentVersion

# doDispose() : void virtual
# setVersion(EnvironmentVersion) : void

- m_handle : Handle*
- m_version : EnvironmentVersion
-------------------------------

-------------------------------
	Connection:
protected Component
-------------------------------
+ Connection(Environment &):ctor explicit
+ ~Connection() : dtor
+ getAutocommit() : bool
+ setAutocommit(bool) : void
+ getLoginTimout() : size_t
+ setLoginTimeout(size_t) : void
+ setConnectTimeout(size_t) : void
+ setCurrentCatalog(std::string const&) : void
+ nativeSQL(std::string const&) : std::string

# getInfo(SQLUSMALLINT,SQLPOINTER,SQLSMALLINT,SQLSMALLINT*):SQLRETURN
# getInfo(SQLUSMALLINT,SQLUSMALLINT&):SQLRETURN
# getInfo(SQLUSMALLINT,SQLUINTEGER&):SQLRETURN

# doDispose() : void virtual

- m_env_ref : Environment&
- m_handle : Handle*
- m_session_ptr : Session*
-------------------------------

-------------------------------
	Session :
protected Component
-------------------------------
+ Session(Connection&,string const&) : ctor
+ Session(Connection&,string const&,string const&,string const&) : ctor
+ ~Session() : dtor virtual
+ getConnection() : Connecion&
+ getConnectTimeout() : size_t
+ getOutConnectionString() : std::string const&
+ getCursorBehavior(bool isCommit) : CursorBehavior
+ getCurrentCatalog() : string
+ commit() : void
+ rollback() : void

# doDispose() : void virtual

- m_conn_ref :Connection&
-------------------------------


-------------------------------
	Transaction:
protected Component
-------------------------------
===============================
+ inner class TransactionEventArgs 
+ getTransaction() : Transaction&
+ isCommit() : bool
+ getCursorBehavior() : CursorBehavior
- m_tran : Transaction&
- m_isCommit : bool
- m_cursorBehavior : CursorBehavior
===============================

+ typedef Event<TransactionEventArgs> TransactionEvent;
+ typedef EventListener<TransactionEventArgs> TransactionEventListener;

+ Transaction(Session&) : explicit ctor
+ ~Transaction() : dtor virtual
+ getSession() : Session&
+ commit() : void
+ rollback() : void

# doDispose() : void virtual
# m_OnTransactionEnd : TransactionEvent

- m_session : Session&
- m_disposeByCommit: bool
- m_prev_autocommit_state : bool
-------------------------------


-------------------------------
	Statement:
potected Component
-------------------------------
+ Statement(Session&): ctor explicit
+ ~Statemnt() : dtor virtual

+ setCursorName(string const&) : void
+ getCursorName() : string

//set to protected for encapsulation
# setCursorType(CursorType) : void
# setCursorScrollable(CursorSCrollable) : void
# setCursorSensitivity(CursorSensitivity) : void
# setCursorConcurrency(CursorConcurrency) : void
# setCursorRowArraySize(size_t) : void
# getCursorType() :CursorType
# getCursorScrollable() :CursorScrollable
# getCursorSensitivity() :CursorSensitivity
# getCursorConcurrency() :CursorConcurrency
# getCursorRowArraySize() : size_t

# closeCursor() : void
+ prepare(std::string const&) : void
+ execute() : void
+ execute(std::string const&) : void
+ hasResultSet() : bool

- m_session_ref : Session&
- m_handle : Handle*
- m_preparedsql: std::string
- m_prepared : bool
- m_cursor : Cursor*
-------------------------------


-------------------------------
	ColumnMetaData
-------------------------------
+ getColumnNo() :size_t
+ getName() : string const&
+ getSqlType() : OdbcSQLType
//+ getCType() : OdbcCType
+ getSize() : size_t
+ getDecimalDigits() :int 
+ getNullable() : int 

- m_no : SQLUSMALLINT
- m_name : std::string 
- m_sqlType : OdbcSQLType
- m_size : SQLULEN;
- m_decimalDigits : SQLSMALLINT 
- m_nullable : SQLSMALLINT 
-------------------------------


-------------------------------
	ResultSetMetaData
-------------------------------
+ getColumnCount() const: size_t
+ getColumnMetaData(size_t) const : ColumnMetaData const&

- m_columnsMetaData : std::vector<ColumnMetaData>
-------------------------------


-------------------------------
	ResultSet:
protected Component
-------------------------------
+ ResultSet(Statement&):ctor explicit
+ getCursor() : Cursor&
-------------------------------


-------------------------------
	Cursor:
protected Component,
protected TransactionEventListener
-------------------------------
+ Cursor(Statement&):ctor explicit //
+ ~Cursor():dtor virtual

+ getName() : std::string
+ getType() : CursorType
+ getScrollable() : CursorScrollable
+ getSensitivity() : CursorSensitivity
+ getConcurrency() : CursorConcurency
+ getRowArraySize() : size_t
+ setRowArraySize(size_t) : void

+ fetchNext() : bool
+ fetchPrevious() : bool
+ fetchFirst() : bool
+ fetchLast() : bool
+ fetchRelative(fetchoffset_t) : bool
+ fetchAbsolute(fetchoffset_t) : bool
+ fetchBookmark() : bool
+ fetch(FetchOrientation,fetchoffset_t) : bool

+ getRowNumber() : SQLLEN
+ getFetchedRowCount() : SQLLEN

# setExternallyClosed() : void
# onEvent(TransactionEvent&,TransactionEventArgs const&):void

- m_stmt_ref : Statement&
- m_rowset : RowSet
- m_isExternallyClosed: bool
-------------------------------


//TODO:this data type definition
//is written arbitarily
-------------------------------
	RowSet
-------------------------------
struct variant_t
{
	variant_t(memory_t,unsigned short);
	memory_t m_memory;
	unsigned short m_type;
};
struct memory_t
{
	memory_t(void*,size_t);
	void *m_addr;
	size_t m_size;
};

+ RowSet()

+ getSize() const : size_t
+ setPosition(size_t) : void
+ getCurrenRowIndex() : size_t
+ getVariant(size_t) const : variant_t

- m_current_rowindex : size_t;
-------------------------------


//jdbc-odbc bridge does not cache
//unbindable column's data.if user
//use the unbindable column in
//wrong order, "Invalid Descriptor
//index" will be thrown.
//so I can do it just like that
-------------------------------
	RowSetBuf
-------------------------------
# bind(Statement &) :void virtual = 0
# isNull(size_t) : bool virtual = 0
# getRawValue(size_t) : memory_t virtual = 0;
# m_first_unbind_colindex :size_t
-------------------------------


-------------------------------
	ColumnWiseBuf:RowSetBuf
-------------------------------
# bind(Statement &) :void virtual
# isNull(size_t) : bool viritual
-------------------------------


-------------------------------
	RowWiseBuf:RowSetBuf
-------------------------------
# bind(Statement &) :void virtual
# isNull(size_t) : bool virtual
-------------------------------


-------------------------------
	ResultSet
-------------------------------
+ ResultSet(Cursor&):ctor explicit
+ ~ResultSet() : dtor virtual

+ next() : bool//exactly one row
+ previous() : bool//exactly one row
+ first() : bool
+ last() : bool
+ absolute(fetchoffset_t) : bool
+ relative(fetchoffset_t) : bool

- m_cursor : Cursor&
-------------------------------


