RAII stands for Resource Acquisition Is Initialization

1.object handles the life time of required resource

"When object was destructed,resource should have been released."

This just emphasis that resource should be released before the last
moment of destruction of the object.

"If resource allocation failed,the object will not be an object,
that's partially constructed in c plus plus."

As there is never a return of constructor,so we can't specific 
one object is partially constructed.The only way to claim this 
is to throw an exception in constructor to break up the 
construction,and then the object will no be constructed as we
supposed. 
Then here is another problem.We need to use exception!!! This
can really slow down the whole system. As obvious as the 
disadvantages ,the most great advantage is function doesn't 
need some state field to identify whether is valid,and every
member function call don't need to query the status first.

Get back to exceptions.
Ignoring the efficiency for this moment,What is the worst 
thing if we really use exceptions for RAII? Or contract to
return value ,Is there any advantages for using exception?

a.We need to handle exceptions anywhere possible.At least
before exception propogated out of the main function.

As a matter of fact,we also need to do similar things to
make program run influently if we are using return value.

b.Things are similar between return value and exceptions.
All extra works need to be done to ensure program didn't 
use invalid resource. but exception is less.

c.Talk about error recovery.This will be much more complicated.
At first,check if an error is encoutered.
Second,do the proceed recovery.

return value version:

int rc = 0;
if(rc = get_resource())
{
	recovery();
}

exception version


try
{
	resource rs;
}catch(some_exception &e)
{
	recovery();
}


